iterative process

(define (accumulate combiner null-term term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (combiner result (term a)))))
  (iter a null-term))

recursive process.

(define (accumulate combiner null-term term a next b)
 (if (> a b)
     null-term
     (combiner (term a)
               (accumulate combiner null-term term (next a) next b))))


Indeed, sum and product can both be defined as follows:

(define (sum term a next b)
  (accumulate + 0 term a next b))

(define (product term a next b)
  (accumulate * 1 term a next b))
