(define (cubic a b c)
  (lambda (x) (+ (cube x) (* a (square x)) (* b x) c)))

(define (cube x) (* x x x))

(define (newtons-method g guess)
  (define (newtons-transform g)
   (lambda (x) (- x (/ (g x)
                       ((deriv g) x)))))
  (fixed-point-transform g newtons-transform guess))

  (define (newtons-method g guess)
    (fixed-point-transform g
                           (lambda (g) (lambda (x) (- x (/ (g x)
                                               ((deriv g) x)))))
                           guess))


(define (deriv g)
  (lambda (x) (/ (- (g (+ x dx)) (g x))
                 dx)))

(define dx 0.000001)

(define (fixed-point-transform f transform guess)
 (fixed-point (transform f) guess))

(define tolerance 0.00001)


(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance))
  (define (try guess)
    (newline)
    (display "Trying guess: ")
    (display guess)
    (let ((next (f guess)))
      (cond ((close-enough? guess next)
              (newline)
              (display "Point found")
              next)
            (else
             (try next)))))
  (try first-guess))
