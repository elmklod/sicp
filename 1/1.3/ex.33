(define (filtered-accumulate combiner
                             filter
                             null-term
                             term
                             a
                             next
                             b)
  (if (filter a)
      (combiner (term a)
                (filtered-accumulate combiner
                                     filter
                                     null-term
                                     term
                                     (next a)
                                     next
                                     b))
      null-term))

(define (filtered-accumulate combiner
                             filter
                             null-term
                             term
                             a
                             next
                             b)
  (define (iter a result)
    (if (filter a)
        (iter (next a) (combiner result (term a)))
        result))
  (iter a null-term))

(define (sum-of-squared-primes min max)
  (define (even? a)
    (= 0 (remainder a 2)))
  (define (make-odd a)
       (+ a (if (or (even? a) (= 1 a))
                1
                2)))
   (define (square-prime a)
    (if (prime? a)
        (square a)
        0))

 (define (less-or-equal-than-max? a) (<= a max))

 (filtered-accumulate +
                      less-or-equal-than-max?
                      0
                      square-prime
                      min
                      make-odd
                      max))
(define (prime? n)
  (define (next n)
    (if (= n 2)
        3
        (+ n 2)))
  (define (smallest-divisor n)
   (test-divisor n 2))

  (define (test-divisor n divisor)
   (cond ((> (square divisor) n) n)
         ((divides? divisor n) divisor)
         (else (test-divisor n (next divisor)))))

  (define (divides? divisor n)
    (= (remainder n divisor) 0))


  (and (> n 1) (= (smallest-divisor n) n)))

(define (product-of-coprimes n)
  (define (even? a)
    (= 0 (remainder a 2)))
  (define (less-than-n a) (< a n))
  (define (coprime-identity a)
    (if (= (gcd a n) 1)
        a
        1))
  (define (next a)
   (+ a (if (even? n)
            2
            1)))
  (filtered-accumulate *
                       less-than-n
                       1
                       coprime-identity
                       1
                       next
                       n))

(define (gcd a b)
 (if (= b 0)
     a
     (gcd b (remainder a b))))
