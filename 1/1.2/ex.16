(define (fast-expt b n)
  (define (square x) (* x x))

  (define (even? n)
    (= (remainder n 2) 0))

  (define (fast-expt-iter b n a)
    (cond ((= n 0) a)
          ((even? n) (fast-expt-iter (square b) (/ n 2) a))
          (else (fast-expt-iter b (- n 1) (* a b)))))
  (fast-expt-iter b n 1))

As with the recursive process, this iterative process requires floor(log2(b)) + [amount of digit 1 in the binary form of n]

Therefore, R[step](n) = Θ(log(n)),

while R[space](n) = Θ(1), as at any time, only space for 1 fast-expt-iter procedure is required.
