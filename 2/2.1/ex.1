(define (make-rat n d)
  (let ((g (gcd (abs n) (abs d)))
        (n-sign (if (or (and (>= n 0)
                             (> d 0))
                        (and (< n 0)
                             (< d 0)))
                    +
                    -)))
    (cons (/ (n-sign (abs n)) g)
          (/ (abs d) g))))

(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))

(define (numer x)
 (car x))

(define (denom x)
 (cdr x))

(define (make-rat n d)
  (let ((g (gcd (abs n) (abs d)))
        (n-sign (lambda (x) ((if (or (and (> n 0)
                                          (> d 0))
                                     (and (< n 0)
                                          (< d 0)))
                                 +
                                 -)
                             x))))
    (cons (/ (n-sign (abs n)) g)
          (/ (abs d) g))))
