(define (div-terms L1 L2)
  (let ((L1 (if (eq? (type-tag L1) 'dense)
                (raise L1)
                L1))
        (L2 (if (eq? (type-tag L2) 'dense)
                      (raise L2)
                      L2)))
  (if (empty-termlist? L1)
      (list (the-empty-termlist)
            (the-empty-termlist))
      (let ((t1 (first-term L1))
            (t2 (first-term L2)))
        (if (> (order t2) (order t1))
            (list (the-empty-termlist) L1)
            (let ((new-c (div (coeff t1)
                              (coeff t2)))
                  (new-o (- (order t1)
                            (order t2))))
              (let ((new-term
                     (make-term new-o
                                new-c)))
                  (let ((rest-of-result
                         (div-terms
                            (sub-terms
                              (rest-terms L1)
                              (mul-term-by-all-terms
                               new-term
                               (rest-terms L2)))
                            L2)))
                     (list (adjoin-term
                             new-term
                             (car rest-of-result))
                           (cadr rest-of-result))))))))))

(define (div-terms L1 L2)

   (if (empty-termlist? L1)
       (list (the-empty-termlist)
             (the-empty-termlist))
       (let ((t1 (first-term L1))
             (t2 (first-term L2)))
         (if (> (order t2) (order t1))
             (list (the-empty-termlist) L1)
             (let ((new-c (div (coeff t1)
                               (coeff t2)))
                   (new-o (- (order t1)
                             (order t2))))
               (let ((new-term
                      (make-term new-o
                                 new-c)))
                   (let ((rest-of-result
                          (div-terms
                             (sub-terms
                               L1
                               (mul-term-by-all-terms
                                new-term
                                L2))
                             L2)))
                      (list (adjoin-term
                              new-term
                              (car rest-of-result))
                            (cadr rest-of-result))))))))))


(define (sub-terms L1 L2)
  (add-terms L1 (negate-terms L2)))


(define (mul-poly p1 p2)
  (if (same-variable? (variable p1)
                      (variable p2))
      (make-poly
       (variable p1)
       (mul-terms (term-list p1)
                  (term-list p2)))
      (error "Polys not in same var:
              MUL-POLY"
             (list p1 p2))))

(put 'div '(polynomial polynomial)
     (lambda (x y)
        (let ((result (div-poly x y)))
            (list (tag (car result))
                  (tag (cadr result))))))
