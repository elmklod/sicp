(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))


(define (gcd-terms a b)
    (let ((a (if (eq? (type-tag a) 'dense)
                  (raise a)
                  a))
          (b (if (eq? (type-tag b) 'dense)
                        (raise b)
                        b)))
  (if (empty-termlist? b)
      a
      (gcd-terms b (remainder-terms a b)))))

(define (div-terms L1 L2)
  (let ((L1 (if (eq? (type-tag L1) 'dense)
                (raise L1)
                L1))
        (L2 (if (eq? (type-tag L2) 'dense)
                      (raise L2)
                      L2)))
   (if (empty-termlist? L1)
       (list (the-empty-termlist)
             (the-empty-termlist))
       (let ((t1 (first-term L1))
             (t2 (first-term L2)))
         (if (> (order t2) (order t1))
             (list (the-empty-termlist) L1)
             (let ((new-c (div (coeff t1)
                               (coeff t2)))
                   (new-o (- (order t1)
                             (order t2))))
               (let ((new-term
                      (make-term new-o
                                 new-c)))
                   (let ((rest-of-result
                          (div-terms
                             (sub-terms
                               L1
                               (mul-term-by-all-terms
                                new-term
                                L2))
                             L2)))
                      (list (adjoin-term
                              new-term
                              (car rest-of-result))
                            (cadr rest-of-result))))))))))

(define (remainder-terms L1 L2)
  (cadr (div-terms L1 L2)))

(define (gcd-poly p1 p2)
  (if (same-variable? (variable p1)
                      (variable p2))
      (make-poly
       (variable p1)
       (gcd-terms (term-list p1)
                  (term-list p2)))
      (error "Polys not in same var:
              GCD-POLY"
             (list p1 p2))))

in the scheme-num pack.
(put 'gcd '(scheme-number scheme-number) gcd)

in the poly pack.:
(put 'gcd '(polynomial polynomial) gcd-poly)

(define (greatest-common-divisor a b)
  (apply-generic 'gcd a b))

Care must be taken with the type of coercion, when all arguments are coerced to the the hieghest(in the tower)
supertype, as it can introduce behaivour most users would find as erroneous, but from the mathematical pov
it is correct.
