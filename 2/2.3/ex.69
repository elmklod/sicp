(define (generate-huffman-tree pairs)
  (successive-merge
   (make-leaf-set pairs)))

(define (successive-merge nodes)
 (cond  ((null? nodes) '())
        ((= (length nodes) 1)
         (car nodes))
        (else (successive-merge (adjoin-set (make-code-tree (car nodes)
                                                   (cadr nodes))
                                   (cddr nodes))))))

(define (successive-merge nodes)
 (if (= (length nodes) 1)
     (car nodes)
     (successive-merge (adjoin-set (make-code-tree (car nodes)
                                                   (cadr nodes))
                                   (cddr nodes)))))

(define (successive-merge nodes)
 (if (= (length nodes) 1)
     (car nodes)
     (successive-merge (adjoin-set (make-code-tree (cadr nodes)
                                                   (car nodes))
                                   (cddr nodes)))))

(define (adjoin-set x set)
  (cond ((null? set) (list x))
        ((< (weight x) (weight (car set)))
         (cons x set))
        (else
         (cons (car set)
               (adjoin-set x (cdr set))))))

(define (symbols tree)
  (if (leaf? tree)
      (list (symbol-leaf tree))
      (caddr tree)))

(define (weight tree)
  (if (leaf? tree)
      (weight-leaf tree)
      (cadddr tree)))

(define (make-code-tree left right)
  (list left
        right
        (append (symbols left)
                (symbols right))
        (+ (weight left) (weight right))))

(define (make-leaf symbol weight)
  (list 'leaf symbol weight))
(define (leaf? object)
  (eq? (car object) 'leaf))
(define (symbol-leaf x) (cadr x))
(define (weight-leaf x) (caddr x))
