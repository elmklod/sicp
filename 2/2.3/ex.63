(define (tree->list-1 tree)
  (if (null? tree)
      '()
      (append
       (tree->list-1
        (left-branch tree))
       (cons (entry tree)
             (tree->list-1
              (right-branch tree))))))

(define (tree->list-2 tree)
  (define (copy-to-list tree result-list)
    (if (null? tree)
        result-list
        (copy-to-list
         (left-branch tree)
         (cons (entry tree)
               (copy-to-list
                (right-branch tree)
                result-list)))))
  (copy-to-list tree '()))

(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right)
  (list entry left right))

(define tree1 (make-tree 7
           (make-tree 3 (make-tree 1 '() '()) (make-tree 5 '() '()))
           (make-tree 9 '() (make-tree 11 '() '()))))

(define tree2 (make-tree 3 (make-tree 1 '() '())
             (make-tree 7 (make-tree 5 '() '())
                          (make-tree 9 '() (make-tree 11 '() '())))))

(define tree3 (make-tree 5
           (make-tree 3 (make-tree 1 '() '()) '())
           (make-tree 9 (make-tree 7 '() '()) (make-tree 11 '() '()))))

 (tree->list-1 tree1) (tree->list-2 tree1)
 (tree->list-1 tree2) (tree->list-2 tree2)
 (tree->list-1 tree3) (tree->list-2 tree3)

(define (element-of-set? x set)
  (cond ((null? set) false)
        ((= x (entry set)) true)
        ((< x (entry set))
         (element-of-set?
          x
          (left-branch set)))
        ((> x (entry set))
         (element-of-set?
          x
          (right-branch set)))))

(define (adjoin-set x set)
  (cond ((null? set) (make-tree x '() '()))
        ((= x (entry set)) set)
        ((< x (entry set))
         (make-tree
          (entry set)
          (adjoin-set x (left-branch set))
          (right-branch set)))
        ((> x (entry set))
         (make-tree
          (entry set)
          (left-branch set)
          (adjoin-set x (right-branch set))))))

They will produce the same result no matter what tree is given to them as an argument:

The first starts expanding(straightening the tree so that the left branch is on the left, while the right is on the right
                            and inserting the straightened tree into the structure in that order) of the tree from above.

The second does the same from below from the right

They have the same order of growth when viewed as simple tree-raversals.

When the append is taken into account:

R(n) for the 1:

2*R(n/2) + n/2 as the append is linear and depends in the size of its (in this case) first argument

While the second may be vieved just as R(n) = 2*R(n/2) which is a linear order of growth
