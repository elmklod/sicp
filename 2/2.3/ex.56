(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
          (make-product
           (multiplier exp)
           (deriv (multiplicand exp) var))
          (make-product
           (deriv (multiplier exp) var)
           (multiplicand exp))))
        ((and (exponentiation? exp) (number? (exponent exp)))
         (make-product
          (make-product
           (exponent exp)
           (make-exponentiation
            (base exp)
            (- (exponent exp)
               1)))
          (deriv (base exp) var)))
        (else (error "unknown expression
                      type: DERIV" exp))))


(define (make-exponentiation base exp)
  (cond ((=number? exp 0) 1)
        ((=number? exp 1) base)
        (else (list '** base exp))))

(define (exponentiation? exp)
 (and (list? exp) (eq? (car exp) '**)))

(define (base exp)
 (cadr exp))

(define (exponent exp)
 (caddr exp))

(define (=number? exp num)
  (and (number? exp) (= exp num)))

(define (same-variable? v1 v2)
  (and (variable? v1)
       (variable? v2)
       (eq? v1 v2)))

(define (variable? x) (symbol? x))
