(define (union-set tree1 tree2)
  (define (union-set-internal set1 set2)
   (cond ((null? set1) set2)
         ((null? set2) set1)
         (else (let ((x1 (car set1))(x2 (car set2)))
                 (cond ((< x1 x2) (cons x1
                                        (union-set-internal (cdr set1)
                                                            set2)))
                       ((> x1 x2) (cons x2
                                        (union-set-internal set1
                                                            (cdr set2))))
                       (else (cons x1
                                   (union-set-internal (cdr set1)
                                                       (cdr set2)))))))))
  (list->tree (union-set-internal (tree->list tree1)
                                  (tree->list tree2))))

(define (intersection-set tree1 tree2)
  (define (intersection-set-internal set1 set2)
    (if (or (null? set1) (null? set2))
        '()
        (let ((x1 (car set1)) (x2 (car set2)))
          (cond ((= x1 x2)
                 (cons x1 (intersection-set-internal
                           (cdr set1)
                           (cdr set2))))
                ((< x1 x2) (intersection-set-internal
                            (cdr set1)
                            set2))
                ((< x2 x1) (intersection-set-internal
                            set1
                            (cdr set2)))))))
   (list->tree (intersection-set-internal (tree->list tree1)
                                          (tree->list tree2))))


(define (tree->list tree)
  (define (copy-to-list tree result-list)
    (if (null? tree)
        result-list
        (copy-to-list
         (left-branch tree)
         (cons (entry tree)
               (copy-to-list
                (right-branch tree)
                result-list)))))
  (copy-to-list tree '()))

(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right)
  (list entry left right))

(define (element-of-set? x set)
  (cond ((null? set) false)
        ((= x (entry set)) true)
        ((< x (entry set))
         (element-of-set?
          x
          (left-branch set)))
        ((> x (entry set))
         (element-of-set?
          x
          (right-branch set)))))

(define (list->tree elements)
  (car (partial-tree
        elements (length elements))))

(define (partial-tree elts n)
  (if (= n 0)
      (cons '() elts)
      (let ((left-size
             (quotient (- n 1) 2)))
        (let ((left-result
               (partial-tree
                elts left-size)))
          (let ((left-tree
                 (car left-result))
                (non-left-elts
                 (cdr left-result))
                (right-size
                 (- n (+ left-size 1))))
            (let ((this-entry
                   (car non-left-elts))
                  (right-result
                   (partial-tree
                    (cdr non-left-elts)
                    right-size)))
              (let ((right-tree
                     (car right-result))
                    (remaining-elts
                     (cdr right-result)))
                (cons (make-tree this-entry
                                 left-tree
                                 right-tree)
                      remaining-elts))))))))


(define tree1 (make-tree 6
           (make-tree 3 (make-tree 1 '() '()) (make-tree 5 '() '()))
           (make-tree 9 '() (make-tree 11 '() '()))))

(define tree2 (make-tree 3 (make-tree 1 '() '())
             (make-tree 7 (make-tree 5 '() '())
                          (make-tree 9 '() (make-tree 11 '() '())))))

(define tree3 (make-tree 5
           (make-tree 3 (make-tree 1 '() '()) '())
           (make-tree 9 (make-tree 8 '() '()) (make-tree 11 '() '()))))

since the order of growth for ordered-list unions and intersections is linear
and the order of growth for tree<->list procedures is linear as well
and each procedure is called only a limited amount(1 or 2 in case of tree->list) of time from the other procedures,
the oreder of growth for the resulting procedures is linear as well, although it is approx 5.5 times as slow as the original ordered-list procedures
