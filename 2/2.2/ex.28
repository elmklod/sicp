(define x
  (list (list 1 2) (list 3 4)))


(define (fringe items)
 (define (fringe-tree items)
  (cond ((null? items) '())
       ((and (pair? items) (pair? (car items)))
        (append (fringe-tree (car items))
                (fringe-tree (cdr items))))
       ((pair? items) (cons (car items)
                            (fringe-tree (cdr items))))))
 (if (pair? items)
     (fringe-tree items)
     (cons items '())))

This version allows the possibility of (car item) = '()
and items = '() or any other data that is not a pair. - a case of 1-node tree

(fringe (list x '()))

(1 2 3 4 ())

(define (fringe items)
 (cond ((null? items) '())
       ((pair? items)
        (append (fringe (car items))
                (fringe (cdr items))))
       (else (list items))))

Malformed version, works on any type of the argument

(fringe (list x '()))

(1 2 3 4)
