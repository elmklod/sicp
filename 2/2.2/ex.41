(define (unique-triples n)
 (flatmap (lambda (i) (map (lambda (pair) (cons i pair))
                           (unique-pairs (- i 1))))
          (enumerate-interval 1 n)))

(define (unique-pairs n)
 (flatmap (lambda (i) (map (lambda (x) (list i x))
                           (enumerate-interval 1 (- i 1))))
          (enumerate-interval 1 n)))

(define (flatmap proc seq)
  (accumulate append nil (map proc seq)))

(define (triple-sum n s)
  (define (triple-right-sum? triple)
   (= s (accumulate +
                    0
                    triple)))
 (filter triple-right-sum? (unique-triples n)))
