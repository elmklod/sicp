selectors:
(define (ramb? exp) (tagged-list? exp 'ramb))
(define (ramb-choices exp) (cdr exp))

to ambeval:
((ramb? exp) (analyze-ramb exp))



(define (analyze-ramb exp)
  (define (cut-nth-elem list n)
    (define (iter before after n)
      (if (= n 0)
          (append (reverse before)
                  (cdr after))
          (iter (cons (car after)
                      before)
                (cdr after)
                (- n 1))))
    (iter '() list n))
  (let ((cprocs
         (map analyze (ramb-choices exp))))
    (lambda (env succeed fail)
      (define (try-next choices)
        (if (null? choices)
            (fail)
            (let ((random-element (random (length choices))))
              ((list-ref choices random-element)
               env
               succeed
               (lambda ()
                 (try-next (cut-nth-elem choices random-element)))))))
      (try-next cprocs))))

; The probability of choosing expression x from all possible statements n
; is not generally (times x appears as an option)/n
; The ramb form chooses according to the amount of expressions
; it initially has even if some of them are recursive
; (ramb 1 (ramb 2 1)) or any other expression that embodies multiple options
; The probability of choosing 1
; is 1/2 + 1/2 * 1/2 = 1/2 + 1/4 = 3/4 = 0.75 instead of 2/3 = 0.(6)
; The probability of choosing 2 is 1/4 instead of 1/3.
; This must be taken into account
; if trying to simulate any distribution
; Also the internal random function must be considered as it is not truly random
; This biases choosing
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (parse-word word-list)
  (define (choose-word words)
    (require (not (null? words)))
    (ramb (car words)
         (choose-word (cdr words))))
  (let ((words (cdr word-list))
        (word-type (car word-list)))
    (list word-type (choose-word words)))) ; the resulting word may be parsed or unparsed, it is up to the implementation

(define (parse-noun-phrase)
  (define (maybe-extend noun-phrase)
    (ramb
     noun-phrase
     (maybe-extend
      (group-or-combine
       noun-phrase
       (parse-prepositional-phrase)
       'noun+prep-phrase))))
  (list 'noun-phrase
        (parse-word articles)
        (maybe-extend (parse-adjective-noun-phrase))))

(define (parse-adjective-noun-phrase)
  (define (surely-extend adjective)
    (list 'adjective-noun-phrase
          adjective
          (ramb (parse-word nouns)
                (surely-extend (parse-word adjectives)))))
  (ramb (parse-word nouns)
       (surely-extend (parse-word adjectives))))

; one can unite adjective so that adjective-noun-phrase is used only before the first adjective.
; this may be achieved by using cons
; the same relates to adverbs
(define (parse-adjective-noun-phrase)
  (define (recurse adjective)
    (cons adjective
          (ramb (recurse (parse-word adjectives))
                (list (parse-word nouns)))))
  (ramb (parse-word nouns)
       (cons 'adjective-noun-phrase
             (recurse (parse-word adjectives)))))

(define adverbs
  '(adverb fully strongly hardly lately lazily hastily slowly often rarely))

(define adjectives
  '(adjective beautiful ugly tasty funny stinky good nice))

;(define (parse-simple-noun-phrase)
;  (list 'simple-noun-phrase
;        (parse-word articles)
;        (parse-word nouns)))

; I do not want to have a grammar where more than 1 adverb is possible before a single verb.
(define (parse-verb-phrase)
  (define (maybe-extend verb-phrase)
    (ramb
     verb-phrase
     (maybe-extend
      (group-or-combine
       verb-phrase
       (parse-prepositional-phrase)
       'verb-phrase))))
  (maybe-extend (parse-adverb-verb-phrase)))

(define (parse-adverb-verb-phrase)
  (ramb (parse-word verbs)
       (list 'adverb-verb-phrase
             (parse-word adverbs)
             (parse-word verbs))))
;----------------
; Grouping here is unnecessary, compound sentence always consists of a simple sentence and any sentence.
; which can either  be simple or compound
; Direct layreing of the same syntactic types never occurs
(define (parse-sentence)
  (define (maybe-compound sentence)
    (ramb sentence
         (list 'compound-sentence
               sentence
               (parse-word conjunctions)
               (parse-sentence))))
  (maybe-compound
         (list 'sentence
               (parse-noun-phrase)
               (parse-verb-phrase))))

(define conjunctions
  '(conjunction and or but so since because as while))

(define (parsed-as phrase)
  (car phrase))

(define (group x y)
  (append x y)) ; or just append if group is defined as a variable

(define (group-or-combine phrase ; I believe 'non-curried' version is clearer
                          addition
                          comb-type)
  ((if (equal?
        (parsed-as phrase)
        comb-type)
       group
       (lambda (x y) (list comb-type x y)))
   phrase
   addition))
