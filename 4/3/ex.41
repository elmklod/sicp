(define (distinct? items)
  (cond ((null? items) true)
        ((null? (cdr items)) true)
        ((member (car items) (cdr items)) false)
        (else (distinct? (cdr items)))))

(define (multiple-dwelling)
  (define (coop c)
    (if (and (< c 6) (= 1 c))
        (coop (+ c 1))
        (if (> c 5)
            (error "MULTIPLE-DWELLING: No solutions")
            (flet c 1))))
  (define (flet c f)
    (if (and (< f 6)
             (or (= 1 f)
                 (= 5 f)
                 (= (abs (- f c))
                    1)))
        (flet c (+ f 1))
        (if (> f 5)
            (coop (+ c 1))
            (smith c f 1))))
  (define (smith c f s)
    (if (and (< s 6)
             (= (abs (- s f))
                1))
        (smith c f (+ s 1))
        (if (> s 5)
            (flet c (+ f 1))
            (miller c f s 1))))
  (define (miller c f s m)
    (if (and (< m 6) (<= m c))
        (miller c f s (+ m 1))
        (if (> m 5)
            (smith c f (+ s 1))
            (baker c f s m 1))))
  (define (baker c f s m b)
    (if (and (< b 6)
             (or (= b 5)
                 (not (distinct? (list b c f m s)))))
        (baker c f s m (+ b 1))
        (if (> b 5)
            (miller c f s (+ m 1))
            (list (list 'baker b)
                  (list 'cooper c)
                  (list 'fletcher f)
                  (list 'miller m)
                  (list 'smith s)))))
  (coop 1))

;Value: ((baker 3) (cooper 2) (fletcher 4) (miller 5) (smith 1))

;one can nest procedures, one can use an object model with assignments, they are all similar.
