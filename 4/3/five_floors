
; forgot that amb may have more than 2 expressions and that numbers are expressions
(define (answer)
  (define (flet-floor L)
    (car L))
  (define (mil-floor L)
    (cadr L))
  (define (bake-floor L)
    (caddr L))
  (define (coop-floor L)
    (cadddr L))
  (define (smit-floor L)
    (caddddr L))
  (let* ((floors '(1 2 3 4 5))
         (inhab-floors
          (list (amb 1 2 3 4 5)
                (amb 1 2 3 4 5)
                (amb 1 2 3 4 5)
                (amb 1 2 3 4 5)
                (amb 1 2 3 4 5))))
    (require (distinct? inhab-floors))
    (require (not (= (bake-floor inhab-floors)
                     5)))
    (require (not (= (coop-floor inhab-floors)
                     1)))
    (require (let ((floor (flet-floor inhab-floors)))
                (not (or (= floor 1)
                         (= floor 5)))))
    (require (> (mil-floor inhab-floors)
                (coop-floor inhab-floors)))
    (require (> (abs (- (smit-floor inhab-floors)
                        (flet-floor inhab-floors)))
                1))
    (require (> (abs (- (coop-floor inhab-floors)
                        (flet-floor inhab-floors)))
                1))
    (map cons inhab-floors '(f m b c s))))
