; First evaluate An.Eva and then this

(define (amb? exp) (tagged-list? exp 'amb))
(define (amb-choices exp) (cdr exp))

(define (analyze exp)
  (cond ((self-evaluating? exp)
         (analyze-self-evaluating exp))
        ((quoted? exp)
         (analyze-quoted exp))
        ((variable? exp)
         (analyze-variable exp))
        ((assignment? exp)
         (analyze-assignment exp))
        ((permanent-assignment? exp)
         (analyze-permanent-assignment exp))
        ((definition? exp)
         (analyze-definition exp))
        ((if? exp)
         (analyze-if exp))
        ((if-fail? exp)
         (analyze-if-fail exp))
        ((lambda? exp)
         (analyze-lambda exp))
        ((begin? exp)
         (analyze-sequence
          (begin-actions exp)))
        ((cond? exp)
         (analyze (cond->if exp)))
        ((let? exp)
         (analyze (let->combination exp)))
        ((let*? exp)
         (analyze (let*->nested-lets exp)))
        ((amb? exp)
         (analyze-amb exp))
        ((ramb? exp)
         (analyze-ramb exp))
        ((and? exp)
         (analyze (and->if exp)))
        ((or? exp)
         (analyze (or->if exp)))
        ((application? exp)
         (analyze-application exp))
        (else
         (error "Unknown expression
                 type: ANALYZE"
                exp))))

(define (ambeval exp env succeed fail)
  ((analyze exp) env succeed fail))

(define (analyze-self-evaluating exp)
  (lambda (env succeed fail)
    (succeed exp fail)))

(define (analyze-quoted exp)
  (let ((qval (text-of-quotation exp)))
    (lambda (env succeed fail)
      (succeed qval fail))))

(define (analyze-variable exp)
  (lambda (env succeed fail)
    (succeed (lookup-variable-value exp env)
             fail)))

(define (analyze-lambda exp)
  (let ((vars (lambda-parameters exp))
        (bproc (analyze-sequence
                (lambda-body exp))))
    (lambda (env succeed fail)
      (succeed (make-procedure vars bproc env)
               fail))))
(define (analyze-if exp)
  (let ((pproc (analyze (if-predicate exp)))
        (cproc (analyze (if-consequent exp)))
        (aproc (analyze (if-alternative exp))))
    (lambda (env succeed fail)
      (pproc env
             ;; success continuation for evaluating
             ;; the predicate to obtain pred-value
             (lambda (pred-value fail2)
               (if (true? pred-value)
                   (cproc env succeed fail2)
                   (aproc env succeed fail2)))
             ;; failure continuation for
             ;; evaluating the predicate
             fail))))

(define (analyze-sequence exps)
  (define (sequentially a b)
    (lambda (env succeed fail)
      (a env
         ;; success continuation for calling a
         (lambda (a-value fail2)
           (b env succeed fail2))
         ;; failure continuation for calling a
         fail)))
  (define (loop first-proc rest-procs)
    (if (null? rest-procs)
        first-proc
        (loop (sequentially first-proc
                            (car rest-procs))
              (cdr rest-procs))))
  (let ((procs (map analyze exps)))
    (if (null? procs)
        (error "Empty sequence: ANALYZE"))
    (loop (car procs) (cdr procs))))

(define (analyze-definition exp)
  (let ((var (definition-variable exp))
        (vproc (analyze
                (definition-value exp))))
    (lambda (env succeed fail)
      (vproc env
             (lambda (val fail2)
               (define-variable! var val env)
               (succeed 'ok fail2))
             fail))))

(define (analyze-assignment exp)
  (let ((var (assignment-variable exp))
        (vproc (analyze
                (assignment-value exp))))
    (lambda (env succeed fail)
      (vproc env
             (lambda (val fail2)    ; *1*
               (let ((old-value
                      (lookup-variable-value
                       var
                       env)))
                 (set-variable-value!
                  var
                  val
                  env)
                 (succeed
                  'ok
                  (lambda ()    ; *2*
                    (set-variable-value!
                     var
                     old-value
                     env)
                    (fail2)))))
               fail))))

(define (analyze-application exp)
  (let ((fproc (analyze (operator exp)))
        (aprocs (map analyze (operands exp))))
    (lambda (env succeed fail)
      (fproc env
             (lambda (proc fail2)
               (get-args
                aprocs
                env
                (lambda (args fail3)
                  (execute-application
                   proc args succeed fail3))
                fail2))
             fail))))

(define (get-args aprocs env succeed fail)
  (if (null? aprocs)
      (succeed '() fail)
      ((car aprocs)
       env
       ;; success continuation for this aproc
       (lambda (arg fail2)
         (get-args
          (cdr aprocs)
          env
          ;; success continuation for
          ;; recursive call to get-args
          (lambda (args fail3)
            (succeed (cons arg args)
                     fail3))
          fail2))
       fail)))

(define (execute-application
         proc args succeed fail)
  (cond ((primitive-procedure? proc)
         (succeed
          (apply-primitive-procedure
           proc args)
          fail))
        ((compound-procedure? proc)
         ((procedure-body proc)
          (extend-environment
           (procedure-parameters proc)
           args
           (procedure-environment proc))
          succeed
          fail))
        (else (error "Unknown procedure type:
                      EXECUTE-APPLICATION"
                     proc))))

(define (analyze-amb exp)
  (let ((cprocs
         (map analyze (amb-choices exp))))
    (lambda (env succeed fail)
      (define (try-next choices)
        (if (null? choices)
            (fail)
            ((car choices)
             env
             succeed
             (lambda ()
               (try-next (cdr choices))))))
      (try-next cprocs))))

(define input-prompt  ";;; Amb-Eval input:")
(define output-prompt ";;; Amb-Eval value:")

(define (driver-loop)
  (define (internal-loop try-again)
    (prompt-for-input input-prompt)
    (let ((input (read)))
      (if (eq? input 'try-again)
          (try-again)
          (begin
            (newline)
            (display
             ";;; Starting a new problem ")
            (ambeval
             input
             the-global-environment
             ;; ambeval success
             (lambda (val next-alternative)
               (announce-output
                output-prompt)
               (user-print val)
               (internal-loop
                next-alternative))
             ;; ambeval failure
             (lambda ()
               (announce-output
                ";;; There are no
                 more values of")
               (user-print input)
               (driver-loop)))))))
  (internal-loop
   (lambda ()
     (newline)
     (display
      ";;; There is no current problem")
     (driver-loop))))

(define (and->if exp)
  (let ((exp (exps-and exp)))
    (if (no-expressions-and? exp)
        'true
        (let ((current-exp (first-exp-and exp)))
          (if (last-expression-and? exp)
              current-exp
              (make-if current-exp
                       (make-and (rest-exps-and exp))
                       'false))))))

; optimized lazy variant
(define (or->if exp)
  (let ((exp (exps-or exp)))
    (if (no-expressions-or? exp)
        'false
        (let ((current-exp (first-exp-or exp)))
          (if (last-expression-or? exp)
              current-exp
              (make-let
               (make-bindings-list
                (make-binding 'variable current-exp))
               (make-body
                (make-if 'variable
                         'variable
                         (make-or (rest-exps-or exp))))))))))


(define (make-and exps)
  (cons 'and exps))
(define (exps-and and-exp)
  (cdr and-exp))
(define (first-exp-and exps) (car exps))
(define (rest-exps-and exps) (cdr exps))
(define (no-expressions-and? exps) (null? exps))
(define (last-expression-and? exps)
  (no-expressions-and? (rest-exps-and exps)))

(define (make-or exps)
  (cons 'or exps))
(define (exps-or or-exp)
  (cdr or-exp))
(define (first-exp-or exps) (car exps))
(define (rest-exps-or exps) (cdr exps))
(define (no-expressions-or? exps) (null? exps))
(define (last-expression-or? exps)
  (no-expressions-or? (rest-exps-or exps)))

(define (or? exp)
 (tagged-list? exp 'or))

(define (and? exp)
 (tagged-list? exp 'and))

(define (make-body exp) (list exp))
(define (make-bindings-list binding) (list binding))
  (define (make-let bindings body)
    (cons 'let
          (cons bindings
                body)))

(define (let*->nested-lets exp)
  (let ((bindings (let*-bindings exp))
        (body (let*-body exp)))
    (define (rec bindings)
      (make-let (make-bindings-list (let*-first-binding bindings))
                (let ((rest (let*-rest-bindings bindings)))
                  (if (let*-no-bindings? rest)
                      body
                      (make-body (rec rest))))))
    (if (let*-no-bindings? bindings)
        (make-let ; it is not simplified to sequence because of the encapsulation it provides
         (the-empty-bindings-list)
         body)
        (rec bindings))))

(define (let*-bindings exp) (cadr exp))
(define (let*-no-bindings? bindings) (null? bindings))
(define (let*-body exp) (cddr exp))
(define (let*-first-binding bindings) (car bindings))
(define (let*-rest-bindings bindings) (cdr bindings))
(define (let*? exp)
  (tagged-list? exp 'let*))

(define (ramb? exp) (tagged-list? exp 'ramb))
(define (ramb-choices exp) (cdr exp))

(define (analyze-ramb exp)
  (define (cut-nth-elem list n)
    (define (iter before after n)
      (if (= n 0)
          (append (reverse before)
                  (cdr after))
          (iter (cons (car after)
                      before)
                (cdr after)
                (- n 1))))
    (iter '() list n))
  (let ((cprocs
         (map analyze (ramb-choices exp))))
    (lambda (env succeed fail)
      (define (try-next choices)
        (if (null? choices)
            (fail)
            (let ((random-element (random (length choices))))
              ((list-ref choices random-element)
               env
               succeed
               (lambda ()
                 (try-next (cut-nth-elem choices random-element)))))))
      (try-next cprocs))))

(define (analyze-permanent-assignment exp)
  (let ((var (permanent-assignment-variable exp))
        (vproc (analyze
                (permanent-assignment-value exp))))
    (lambda (env succeed fail)
      (vproc env
             (lambda (val fail2)
               (set-variable-value!
                var
                val
                env)
               (succeed
                'ok
                fail2))
             fail))))

(define (permanent-assignment? exp)
  (tagged-list? exp 'permanent-set!))
(define (permanent-assignment-variable exp) (cadr exp))
(define (permanent-assignment-value exp) (caddr exp))

(define (if-fail-succeed exp) (cadr exp))
(define (if-fail-fail exp) (caddr exp))
(define (if-fail? exp)
  (tagged-list? exp 'if-fail))

(define (analyze-if-fail exp)
  (let ((sproc (analyze (if-fail-succeed exp)))
        (fproc (analyze (if-fail-fail exp))))
    (lambda (env succeed fail)
      (sproc env
             succeed
             (lambda ()
               (fproc env
                      succeed
                      fail))))))
