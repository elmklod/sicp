(define (not val)
  (if val false true))

(define (require condition)
  (if (not condition) (amb)))

(define (square x)
  (* x x))

(define (sqrt x)
  (define (good-enough? guess x)
    (< (abs (- (square guess) x)) 0.001))
  (define (improve guess x)
    (average guess (/ x guess)))
  (define (sqrt-iter guess x)
    (if (good-enough? guess x)
        guess
        (sqrt-iter (improve guess x) x)))
  (sqrt-iter 1.0 x))

(define (an-integer-starting-from n)
  (amb n (an-integer-starting-from (+ n 1))))

;(define (list . w) ; a hack that is not working somehow
;  w)

(define (distinct? items)
  (cond ((null? items) true)
        ((null? (cdr items)) true)
        ((member (car items) (cdr items)) false)
        (else (distinct? (cdr items)))))

(define (abs x)
  (if (>= x 0) x (- x))) ; or just >

(define (xor a b)
  (and (or a b) (not (and a b))))

(define (cadr x)
  (car (cdr x)))

(define (caar x)
  (car (car x)))

(define (cadar x)
  (cadr (car x))))

(define (reverse l)
 (define (iter l rev-l)
  (if (null? l)
      rev-l
      (iter (cdr l) (cons (car l) rev-l))))
 (iter l '()))

(define (map proc items)
 (define (iter items result)
  (if (null? items)
      result
      (iter (cdr items) (cons (proc (car items)) result))))
 (iter (reverse items) '()))

(define (filter predicate seqs)
  (if (null? seqs)
      '()
      (let ((seqs-car (car seqs)))
        (if (predicate seqs-car)
            (cons seqs-car
                  (filter predicate
                          (cdr seqs)))
            (filter predicate
                    (cdr seqs))))))

(define (memq item x)
  (cond ((null? x) false)
        ((eq? item (car x)) x)
        (else (memq item (cdr x)))))

(define (for-each op seqs)
  (if (not (null? seqs))
      (begin (op (car seqs))
             (for-each op (cdr seqs)))))

(define (even? x) (= (quotient x 2) (/ x 2)))
(define (odd? x) (not (even? x)))

(define (prime-sum-pair list1 list2)
  (let ((a (an-element-of list1))
        (b (an-element-of list2)))
    (require (prime? (+ a b)))
    (list a b)))

(define (an-element-of items)
  (require (not (null? items)))
  (amb (car items)
       (an-element-of (cdr items))))

(define (remainder x divisor)
  (- x (* divisor (quotient x divisor))))

(define (prime? n)
  (define (smallest-divisor n)
   (test-divisor n 2))

  (define (test-divisor n divisor)
   (cond ((> (square divisor) n) n)
         ((divides? divisor n) divisor)
         (else (test-divisor n (+ divisor 1)))))

  (define (divides? divisor n)
    (= (remainder n divisor) 0))


  (and (> n 1) (= (smallest-divisor n) n)))

(define (average x y)
  (/ (+ x y) 2))

(define (sqrt x)
  (define (good-enough? guess)
    (< (abs (- (square guess) x)) 0.001))
  (define (guess-improved-from guess)
    (amb
     guess
     (guess-improved-from
      (average guess (/ x guess)))))
  (let ((root (guess-improved-from 1.0)))
    (require (good-enough? root))
    root))
