(rule (can-replace ?person-1 ?person-2)
  (and (or (and (job ?person-1 ?position) ; . is not necessary
                (job ?person-2 ?position))
           (and (can-do-job ?person-1-position ?person-2-position) ; ?position and ?person-1-position can be the same variables, the distinction is made for clarity
                (job ?person-1 ?person-1-position)
                (job ?person-2 ?person-2-position)))
       (not (same ?person-1 ?person-2))))

(rule (can-replace ?person-1 ?person-2)
  (and (job ?person-1 ?position-1)
       (job ?person-2 ?position-2)
       (or (can-do-job ?position-1 ?position-2)
           (same ?position-1 ?position-2))
       (not (same ?person-1 ?person-2))))


notice the infinite regression that was avoided.
However, with that the ability to recursively check for a replacement is lost.
It is not possible here to make long inference chains with more than 2 elements in it.
e.g. Ben cannot replace Louis according to the rule above. Using the real-world logic, it can be inferred that he can.

(can-replace ?person (Fect Cy D))

(and (can-replace ?working-horse ?lazy)
     (lisp-value > ?underpayment ?overpayment)
     (salary ?working-horse ?underpayment)
     (salary ?lazy ?overpayment))
