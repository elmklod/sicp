; First evaluate this modified amb-evaluator

; New primitives for the amb evaluators:
; newline
; display
; read
; error
; Modified amb-evaluator:
(define (analyze exp)
  (cond ((self-evaluating? exp)
         (analyze-self-evaluating exp))
        ((quoted? exp)
         (analyze-quoted exp))
        ((variable? exp)
         (analyze-variable exp))
        ((assignment? exp)
         (analyze-assignment exp))
        ((permanent-assignment? exp)
         (analyze-permanent-assignment exp))
        ((definition? exp)
         (analyze-definition exp))
        ((if? exp)
         (analyze-if exp))
        ((if-fail? exp)
         (analyze-if-fail exp))
        ((lambda? exp)
         (analyze-lambda exp))
        ((begin? exp)
         (analyze-sequence
          (begin-actions exp)))
        ((cond? exp)
         (analyze (cond->if exp)))
        ((let? exp)
         (analyze (let->combination exp)))
        ((let*? exp)
         (analyze (let*->nested-lets exp)))
        ((amb? exp)
         (analyze-amb exp))
        ((ramb? exp)
         (analyze-ramb exp))
        ((and? exp)
         (analyze (and->if exp)))
        ((or? exp)
         (analyze (or->if exp)))
        ((alteration? exp)
         (analyze-alteration exp))
        ((application? exp)
         (analyze-application exp))
        (else
         (error "Unknown expression
                 type: ANALYZE"
                exp))))

(define (driver-loop)
  (internal-loop
   (lambda ()
     (newline)
     (display
      ";;; There is no current problem")
     (driver-loop))))

(define (internal-loop try-again)
  (prompt-for-input input-prompt)
  (let ((input (read)))
    (if (eq? input 'try-again)
        (try-again)
        (begin
          (newline)
          (display
           ";;; Starting a new problem ")
          (ambeval
           input
           the-global-environment
           print-success-continuation
           resetting-failure-continuation)))))

(define (print-success-continuation
         val next-alternative)
  (announce-output
   output-prompt)
  (user-print val)
  (internal-loop
   next-alternative))

(define (resetting-failure-continuation)
 (announce-output
  ";;; There are no
   more values of")
 (user-print input)
 (driver-loop))

(define (alteration? exp) (tagged-list? exp 'alter))

; This case specifically can do without resetting the success continuation
; Since in query-driver-loop it has no additional success continuations appended to it
; And this success continuation is not used during the logical evaluator program processing
; To prevent future bugs, this special form resets success continuation.
(define (analyze-alteration exp)
  (let ((seqs-proc (analyze-sequence (alternative-sequence exp))))
    (lambda (env succeed fail)
      (seqs-proc
       env
       print-success-continuation
       resetting-failure-continuation))))


; Within amb-evaluator first evaluate Logi.Eva(its relevant parts)
; then this


(define (qeval query frame)
  (let ((qproc (get-special-form (type query))))
    (if qproc
        (qproc (contents query) frame)
        (simple-query query frame))))

(define (query-driver-loop)
 (prompt-for-input input-prompt)
 (let ((input (read))) ; It is not processed by query-syntax-process on purpose to avoid changing 'try-again if it can be changed by the proc
  (if (eq? input 'try-again)  ; Or use (require (not (eq? 'try-again))) which is less intuitive
      (amb)
      (alternate
       (let ((q (query-syntax-process input)))
         (cond ((assertion-to-be-added? q)
                (add-rule-or-assertion!
                 (add-assertion-body q))
                (newline)
                (display
                 "Assertion added to data base.")
                (query-driver-loop))
               (else
                (newline)
                (display output-prompt)
                (display-line
                 (instantiate
                  q
                  (qeval q the-empty-frame)
                  (lambda (v f)
                   (contract-question-mark v))))
                (query-driver-loop))))))))


; It is possible to centralize query-driver-loop recursive application because everything else is used only for its side-effect, not value
(define (query-driver-loop)
 (prompt-for-input input-prompt)
 (let ((input (read)))
  (if (eq? input 'try-again)
      (amb)
      (alternate
       (let ((q (query-syntax-process input)))
         (cond ((assertion-to-be-added? q)
                (add-rule-or-assertion!
                 (add-assertion-body q))
                (newline)
                (display
                 "Assertion added to data base."))
               (else
                (newline)
                (display output-prompt)
                (display-line
                 (instantiate
                  q
                  (qeval q the-empty-frame)
                  (lambda (v f)
                   (contract-question-mark v))))))
         (query-driver-loop))))))   ; ***

(define (query-driver-loop)
 (prompt-for-input input-prompt)
 (let ((input (read)))
  (require (not (eq? input 'try-again)))
  (alternate
   (let ((q (query-syntax-process input)))
     (cond ((assertion-to-be-added? q)
            (add-rule-or-assertion!
             (add-assertion-body q))
            (newline)
            (display
             "Assertion added to data base."))
           (else
            (newline)
            (display output-prompt)
            (display-line
             (instantiate
              q
              (qeval q the-empty-frame)
              (lambda (v f)
               (contract-question-mark v))))))
     (query-driver-loop))))))   ; ***


; It is from ex.77
(define the-empty-frame (list '() '() empty-filters))

(define (simple-query query-pattern
                      frame)
   (amb (find-assertions query-pattern frame)
        (apply-rules query-pattern frame)))

; More instructive
(define (amb-loop op L)
 (if (null? L)
     (amb)
     (amb (op (car L))
          (amb-loop op (cdr L)))))

; Neat
(define (amb-loop op L)
 (require (not (null? L)))
 (amb (op (car L))
      (amb-loop op (cdr L))))

; Implementing it via folds is hard:
; A lot of redundant variants and computations will be introduced

; Two appoaches: One preserves structure, the other adapts it to the evaluator
(define (find-assertions pattern frame)
  (amb-loop
   (lambda (datum)
    (check-an-assertion datum pattern frame))
   (fetch-assertions pattern)))

(define (check-an-assertion
         assertion query-pat query-frame)
  (let ((match-result
         (pattern-match
          query-pat assertion query-frame)))
    (if (eq? match-result 'failed)
        (amb)
        match-result)))

; Idiomatic
(define (check-an-assertion
         assertion query-pat query-frame)
  (let ((match-result
         (pattern-match
          query-pat assertion query-frame)))
   (require (not (eq? match-result 'failed)))
   match-result))

(define (pattern-match pat dat frame)
  (cond ((eq? frame 'failed) 'failed)
        ((equal? pat dat) frame)
        ((var? pat)
         (extend-if-consistent
          pat dat frame))
        ((and (pair? pat) (pair? dat))
         (pattern-match
          (cdr pat)
          (cdr dat)
          (pattern-match
           (car pat) (car dat) frame)))
        (else 'failed)))

;;;;;;;;;;;;;;
; Neat, check-an-assertion is removed

(define (find-assertions pattern frame)
  (amb-loop
   (lambda (datum)
    (pattern-match pattern datum frame))
   (fetch-assertions pattern)))


(define (pattern-match pat dat frame)
  (cond ((equal? pat dat) frame)
        ((var? pat)
         (extend-if-consistent
          pat dat frame))
        ((and (pair? pat) (pair? dat))
         (pattern-match
          (cdr pat)
          (cdr dat)
          (pattern-match
           (car pat) (car dat) frame)))
        (else (amb))))

;---------------------

(define (apply-rules pattern frame)
  (amb-loop
   (lambda (rule)
     (apply-a-rule rule pattern frame))
   (fetch-rules pattern)))

; ex.67
(define (apply-rules pattern frame)
  (let ((parent-history (frame-history frame)))
   (check-history frame pattern) ; Imperative
   (restore-history-frame
    parent-history
    (amb-loop
     (lambda (rule)
       (apply-a-rule
        rule
        pattern
        frame))
     (fetch-rules pattern)))))

; Using amb here removes the idea of signaling about loops, although it now skips loop-entering computations
(define (check-history frame pattern)
 (define (generalizes? pat hist)
  (define (includes? pat hist-pat)
    (cond ((equal? pat hist-pat) true)
          ((eq? pat 'unbound)
           true)
          ((and (pair? pat) (pair? hist-pat))
           (and (includes? (car pat) (car hist-pat))
                (includes? (cdr pat) (cdr hist-pat))))
          (else false)))
  (fold-left
   false
   (lambda (init hist-pat)
    (or init
        (includes? pat hist-pat)))
   hist))
 (if (generalizes?
      (make-history-pattern pattern frame)
      (frame-history frame))
     (error "A loop is detected" pattern frame-history)
     'ok))


; Add filters from ex.77 if needed
(define (restore-history-frame parent-history frame)
 (make-frame
  (frame-bindings frame)
  parent-history
  (frame-filters frame)))

(define (apply-a-rule rule
                      query-pattern
                      query-frame)
  (let ((clean-rule
         (rename-variables-in rule)))
    (let ((unify-result
           (unify-match query-pattern
                        (conclusion clean-rule)
                        query-frame)))
      (if (eq? unify-result 'failed)
          (amb)
          (qeval (rule-body clean-rule)
                 unify-result)))))

; Idiomatic
(define (apply-a-rule rule
                      query-pattern
                      query-frame)
  (let ((clean-rule
         (rename-variables-in rule)))
    (let ((unify-result
           (unify-match query-pattern
                        (conclusion clean-rule)
                        query-frame)))
     (require (not (eq? unify-result 'failed)))
     (qeval (rule-body clean-rule)
            unify-result))))

(define (unify-match p1 p2 frame)
  (cond ((eq? frame 'failed) 'failed)
        ((equal? p1 p2) frame)
        ((var? p1)
         (extend-if-possible p1 p2 frame))
        ((var? p2)
         (extend-if-possible
          p2
          p1
          frame))        ; ***
        ((and (pair? p1)
              (pair? p2))
         (unify-match
          (cdr p1)
          (cdr p2)
          (unify-match
           (car p1)
           (car p2)
           frame)))
        (else 'failed)))

(define (extend-if-possible var val frame)
  (let ((binding (binding-in-frame var frame)))
    (cond (binding
           (unify-match
            (binding-value binding) val frame))
          ((var? val)                   ; ***
           (let ((binding
                  (binding-in-frame
                   val
                   frame)))
             (if binding
                 (unify-match
                  var
                  (binding-value binding)
                  frame)
                 (extend var val frame))))
          ((depends-on? val var frame)  ; ***
           'failed)
          (else (extend var val frame)))))

; Can fail as (amb) instead of true, removing the need to have a clause consequent
; or use (require (not (equal? var e)))
(define (depends-on? exp var frame)
  (define (tree-walk e)
    (cond ((var? e)
           (if (equal? var e)
               true                  ; here
               (let
                 ((b (binding-in-frame
                      e
                      frame)))
                  (if b
                      (tree-walk
                       (binding-value b))
                      false))))
          ((pair? e)
           (or (tree-walk (car e))
               (tree-walk (cdr e))))
          (else false)))
  (tree-walk exp))

;------------------------
(define (apply-a-rule rule
                      query-pattern
                      query-frame)
  (let ((clean-rule
         (rename-variables-in rule)))
    (let ((unify-result
           (unify-match query-pattern
                        (conclusion clean-rule)
                        query-frame)))
      (qeval (rule-body clean-rule)
             unify-result))))

(define (update-history-frame inst frame)
 (make-frame (frame-bindings frame)
             (cons inst (frame-history frame))
             (frame-filters frame)))

; ex.67
(define (apply-a-rule rule
                      query-pattern
                      query-frame)
  (let ((clean-rule
         (rename-variables-in rule)))
    (let ((unify-result
           (unify-match query-pattern
                        (conclusion clean-rule)
                        query-frame)))
      (qeval (rule-body clean-rule)
              (update-history-frame
               (make-history-pattern
                query-pattern
                unify-result)
               unify-result)))))

(define (unify-match p1 p2 frame)
  (cond ((equal? p1 p2) frame)
        ((var? p1)
         (extend-if-possible p1 p2 frame))
        ((var? p2)
         (extend-if-possible
          p2
          p1
          frame))        ; ***
        ((and (pair? p1)
              (pair? p2))
         (unify-match
          (cdr p1)
          (cdr p2)
          (unify-match
           (car p1)
           (car p2)
           frame)))
        (else (amb))))

(define (extend-if-possible var val frame)
  (let ((binding (binding-in-frame var frame)))
    (cond (binding
           (unify-match
            (binding-value binding) val frame))
          ((var? val)                   ; ***
           (let ((binding
                  (binding-in-frame
                   val
                   frame)))
             (if binding
                 (unify-match
                  var
                  (binding-value binding)
                  frame)
                 (extend var val frame))))
          (else (require (not (depends-on? val var frame)))
                (extend var val frame)))))

; Rules and assertions are better suited for storage in lists, not streams
; they are already evaluated before consing
; This implementation requires storing them in lists(amb-loop)

(define assertions-and-rules-lists
  (make-table-2D equal?))

(define put-to-assertion-or-rule-list
  (assertions-and-rules-lists 'insert!))

(define get-from-assertion-or-rule-list
  (assertions-and-rules-lists 'lookup))

(define THE-ASSERTIONS '())

(define (fetch-assertions pattern)
  (if (use-index? pattern)
      (get-indexed-assertions pattern)
      (get-all-assertions)))

(define (get-all-assertions) THE-ASSERTIONS) ; why is it needed? just for an abstraction?

(define (get-indexed-assertions pattern)
  (get-list (index-key-of pattern)
            'assertion-list))

(define (get-list key2 key1)
  (let ((s (get-from-assertion-or-rule-list key2 key1)))
    (if s s '())))

(define THE-RULES '())

(define (fetch-rules pattern)
  (if (use-index? pattern)
      (get-indexed-rules pattern)
      (get-all-rules)))

(define (get-all-rules) THE-RULES)

; Lists can be appended but it is time(and depending on the implementation, memory) consuming.
; Far more interesting and effective is to use amb to choose between them.
(define (get-indexed-rules pattern)
  (amb
   (get-list (index-key-of pattern)
               'rule-list)
   (get-list '? 'rule-list)))

(define (add-rule-or-assertion! assertion)
  (if (rule? assertion)
      (add-rule! assertion)
      (add-assertion! assertion)))

(define (add-assertion! assertion)
  (store-assertion-in-index assertion)
  (let ((old-assertions THE-ASSERTIONS))
    (set! THE-ASSERTIONS
          (cons assertion
                old-assertions))
    'ok))

(define (add-rule! rule)
  (store-rule-in-index rule)
  (let ((old-rules THE-RULES))
    (set! THE-RULES
          (cons rule old-rules))
    'ok))

(define (store-assertion-in-index assertion)
  (if (indexable? assertion)
      (let ((key (index-key-of assertion)))
        (let ((current-assertion-list
               (get-list
                key 'assertion-list)))
          (put-to-assertion-or-rule-list
           key
           'assertion-list
           (cons
            assertion
            current-assertion-list))))))

(define (store-rule-in-index rule)
  (let ((pattern (conclusion rule)))
    (if (indexable? pattern)
        (let ((key (index-key-of pattern)))
          (let ((current-rule-list
                 (get-list
                  key 'rule-list)))
            (put-to-assertion-or-rule-list
             key
             'rule-list
             (cons
              rule
              current-rule-list)))))))



; Renaming of parameters
(define (always-true ignore frame)
  frame)

; disjuncts/conjuncts is a list
(define (disjoin disjuncts frame)
 (amb-loop
  (lambda (disjunct)
   (qeval disjunct frame))
  disjuncts))

(define (conjoin conjuncts frame)
 (fold-left
  (lambda (fr conjunct)
   (qeval conjunct fr))
  frame
  conjuncts))

; ex.76 - the only requirement is unify-frames and its dependencies
(define (conjoin conjuncts frame)
 (fold-left
  (lambda (fr conjunct)
   (unify-frames
    fr
    (qeval conjunct frame)))
  the-empty-frame
  conjuncts))

(put-special-form 'and conjoin)

(define (unify-frames F1 F2)
   (fold-left
    (lambda (result-frame binding)
      (simple-unify-match
       (binding-variable binding)
       (binding-value binding)
       result-frame))
    F1
    (frame-bindings F2)))

(define (simple-unify-match var val frame)
  (cond ((eq? frame 'failed) 'failed)
        (else
         (extend-if-possible var val frame))))

; ((eq? frame 'failed) 'failed) clause is not needed if there is no intermediate value 'failed and
; failure is directly achieved either via require statement or (amb)
(define (simple-unify-match var val frame)
 (extend-if-possible var val frame))

(define (fold-left op init seqs)
  (if (null? seqs)
      init
      (fold-left op
                 (op init (car seqs))
                 (cdr seqs))))

(put-special-form 'or disjoin)

(define (negate operands frame)
 (require                       ; This combination of require and if-fail with the specific return values lets the computation fail on success of some computation and succeed on its failure. A special form is warranted for convenience
  (if-fail
   (begin
    (qeval (negated-query operands)
           frame)
    false)
   true))
 frame)

(put-special-form 'not negate)

(define (lisp-value call frame)
 (require
  (execute
   (instantiate
    call
    frame
    (lambda (v f)
     (error
      "Unknown pat var: LISP-VALUE"
      v)))))
 frame)

; Provide all variables here except for exp
; to the amb evaluator
(define (execute exp)
 (apply (eval (predicate exp)
              user-initial-environment)
        (args exp)))

(put-special-form 'lisp-value lisp-value)

; Filters from ex.77 can be easily added

(define (negate operands frame)
 (filter-or-delay
  frame
  (negated-query operands)
  (lambda (q f)
    (if-fail
     (begin
      (qeval q f)
      false)
     true))))

(define (lisp-value call frame-stream)
 (filter-or-delay
  frame
  call
  (lambda (q f)
   (execute
    (instantiate
     q
     f
     (lambda (v f) ; Unnecessary
      (error
       "Unknown pat var: LISP-VALUE"
       v)))))))

(define (filter-or-delay
         frame
         query
         filter-check)
 (let ((inst-query (update-query query frame)))
  (if (has-unbound-vars? inst-query)           ; part of update-query-and-check-filter/fold-left-optim with init set to the original filters and the list having the filter as its only element(check-filters)
      (add-filter frame inst-query filter-check)
      (begin (require (filter-check inst-query frame))
             frame))))

(define (extend variable value frame)
 (let* ((new-binding (make-binding variable value))
        (old-filters (frame-filters frame))
        (extend-with-new-binding-and-updated-filters
         (lambda (filters)
          (make-frame
           (cons new-binding
                 (frame-bindings frame))
           (frame-history frame)
           filters))))
  (if (no-filters? old-filters)
      (extend-with-new-binding-and-updated-filters
       empty-filters)
      (check-filters
       old-filters
       new-binding
       extend-with-new-binding-and-updated-filters))))

(define (check-filters
         old-filters
         new-binding
         add-filters-to-frame)
  (define update-query-and-check-filter
    (let ((frame-with-binding
           (frame-add-binding new-binding the-empty-frame))) ; Can be recursively computed with extend. Introduces additional binding creation and requires changing the proc header of the check-filters procedure: Substitute new-binding par with 2: var and val that take original var and val values from extend
      (lambda (filters filter)
        (let* ((check (filter-check filter))
               (query (filter-query filter))
               (updated-query (update-query
                               query
                               frame-with-binding)))
         (if (has-unbound-vars? updated-query)
             (add-filter-to-filters
              (make-filter
               updated-query
               check)
              filters)
             (begin (require (check updated-query)) ; amb is here
                    filters))))))
  (let ((new-filters
         (fold-left
          update-query-and-check-filter
          empty-filters
          (reverse old-filters)))) ; Unnecessary. Used to keep some order of filters across same frame expansions(parallel and sequential)
   (add-filters-to-frame
    new-filters)))
