; First evaluate this modified amb-evaluator

; New primitives for the amb evaluators:
; newline
; display
; read
; Modified amb-evaluator:
(define (analyze exp)
  (cond ((self-evaluating? exp)
         (analyze-self-evaluating exp))
        ((quoted? exp)
         (analyze-quoted exp))
        ((variable? exp)
         (analyze-variable exp))
        ((assignment? exp)
         (analyze-assignment exp))
        ((permanent-assignment? exp)
         (analyze-permanent-assignment exp))
        ((definition? exp)
         (analyze-definition exp))
        ((if? exp)
         (analyze-if exp))
        ((if-fail? exp)
         (analyze-if-fail exp))
        ((lambda? exp)
         (analyze-lambda exp))
        ((begin? exp)
         (analyze-sequence
          (begin-actions exp)))
        ((cond? exp)
         (analyze (cond->if exp)))
        ((let? exp)
         (analyze (let->combination exp)))
        ((let*? exp)
         (analyze (let*->nested-lets exp)))
        ((amb? exp)
         (analyze-amb exp))
        ((ramb? exp)
         (analyze-ramb exp))
        ((and? exp)
         (analyze (and->if exp)))
        ((or? exp)
         (analyze (or->if exp)))
        ((alteration? exp)
         (analyze-alteration exp))
        ((application? exp)
         (analyze-application exp))
        (else
         (error "Unknown expression
                 type: ANALYZE"
                exp))))

(define (driver-loop)
  (internal-loop
   (lambda ()
     (newline)
     (display
      ";;; There is no current problem")
     (driver-loop))))

(define (internal-loop try-again)
  (prompt-for-input input-prompt)
  (let ((input (read)))
    (if (eq? input 'try-again)
        (try-again)
        (begin
          (newline)
          (display
           ";;; Starting a new problem ")
          (ambeval
           input
           the-global-environment
           print-success-continuation
           resetting-failure-continuation)))))

(define (print-success-continuation
         val next-alternative)
  (announce-output
   output-prompt)
  (user-print val)
  (internal-loop
   next-alternative))

(define (resetting-failure-continuation)
 (announce-output
  ";;; There are no
   more values of")
 (user-print input)
 (driver-loop))

(define (alteration? exp) (tagged-list? exp 'alter))

; This case specifically can do without resetting the success continuation
; Since in query-driver-loop it has no additional success continuations appended to it
; And this success continuation is not used during the logical evaluator program processing
; To prevent future bugs, this special form resets success continuation.
(define (analyze-alteration exp)
  (let ((seqs-proc (analyze-sequence (alternative-sequence exp))))
    (lambda (env succeed fail)
      (seqs-proc
       env
       print-success-continuation
       resetting-failure-continuation))))


; Within amb-evaluator first evaluate Logi.Eva
; then this


(define (qeval query frame)
  (let ((qproc (get-special-form (type query))))
    (if qproc
        (qproc (contents query) frame)
        (simple-query query frame))))

(define (query-driver-loop)
 (prompt-for-input input-prompt)
 (let ((input (read))) ; It is not processed by query-syntax-process on purpose to avoid changing 'try-again if it can be changed by the proc
  (if (eq? input 'try-again)  ; Or use (require (not (eq? 'try-again))) which is less intuitive
      (amb)
      (alternate
       (let ((q (query-syntax-process input)))
         (cond ((assertion-to-be-added? q)
                (add-rule-or-assertion!
                 (add-assertion-body q))
                (newline)
                (display
                 "Assertion added to data base.")
                (query-driver-loop))
               (else
                (newline)
                (display output-prompt)
                (display-line
                 (instantiate
                  q
                  (qeval q the-empty-frame)
                  (lambda (v f)
                   (contract-question-mark v))))
                (query-driver-loop))))))))


; It is possible to centralize query-driver-loop recursive application because everything else is used only for its side-effect, not value
(define (query-driver-loop)
 (prompt-for-input input-prompt)
 (let ((input (read)))
  (if (eq? input 'try-again)
      (amb)
      (alternate
       (let ((q (query-syntax-process input)))
         (cond ((assertion-to-be-added? q)
                (add-rule-or-assertion!
                 (add-assertion-body q))
                (newline)
                (display
                 "Assertion added to data base."))
               (else
                (newline)
                (display output-prompt)
                (display-line
                 (instantiate
                  q
                  (qeval q the-empty-frame)
                  (lambda (v f)
                   (contract-question-mark v))))))
         (query-driver-loop))))))   ; ***

(define (query-driver-loop)
 (prompt-for-input input-prompt)
 (let ((input (read)))
  (require (not (eq? input 'try-again)))
  (alternate
   (let ((q (query-syntax-process input)))
     (cond ((assertion-to-be-added? q)
            (add-rule-or-assertion!
             (add-assertion-body q))
            (newline)
            (display
             "Assertion added to data base."))
           (else
            (newline)
            (display output-prompt)
            (display-line
             (instantiate
              q
              (qeval q the-empty-frame)
              (lambda (v f)
               (contract-question-mark v))))))
     (query-driver-loop))))))   ; ***


; It is from ex.77
(define the-empty-frame (list '() '() empty-filters))

(define (simple-query query-pattern
                      frame)
   (amb (find-assertions query-pattern frame)
        (apply-rules query-pattern frame)))

; More instructive
(define (amb-loop op L)
 (if (null? L)
     (amb)
     (amb (op (car L))
          (amb-loop op (cdr L)))))

; Neat
(define (amb-loop op L)
 (require (not (null? L)))
 (amb (op (car L))
      (amb-loop op (cdr L))))

; Implementing it via folds is hard:
; A lot of redundant variants and computations will be introduced

; Two appoaches: One preserves structure, the other adapts it to the evaluator
(define (find-assertions pattern frame)
  (amb-loop
   (lambda (datum)
    (check-an-assertion datum pattern frame))
   (fetch-assertions pattern)))

(define (check-an-assertion
         assertion query-pat query-frame)
  (let ((match-result
         (pattern-match
          query-pat assertion query-frame)))
    (if (eq? match-result 'failed)
        (amb)
        match-result)))

; Idiomatic
(define (check-an-assertion
         assertion query-pat query-frame)
  (let ((match-result
         (pattern-match
          query-pat assertion query-frame)))
   (require (not (eq? match-result 'failed)))
   match-result))

(define (pattern-match pat dat frame)
  (cond ((eq? frame 'failed) 'failed)
        ((equal? pat dat) frame)
        ((var? pat)
         (extend-if-consistent
          pat dat frame))
        ((and (pair? pat) (pair? dat))
         (pattern-match
          (cdr pat)
          (cdr dat)
          (pattern-match
           (car pat) (car dat) frame)))
        (else 'failed)))

;;;;;;;;;;;;;;
; Neat, check-an-assertion is removed

(define (find-assertions pattern frame)
  (amb-loop
   (lambda (datum)
    (pattern-match pattern datum frame))
   (fetch-assertions pattern)))


(define (pattern-match pat dat frame)
  (cond ((equal? pat dat) frame)
        ((var? pat)
         (extend-if-consistent
          pat dat frame))
        ((and (pair? pat) (pair? dat))
         (pattern-match
          (cdr pat)
          (cdr dat)
          (pattern-match
           (car pat) (car dat) frame)))
        (else (amb))))

;---------------------

(define (apply-rules pattern frame)
  (amb-loop
   (lambda (rule)
     (apply-a-rule rule pattern frame))
   (fetch-rules pattern)))

(define (apply-a-rule rule
                      query-pattern
                      query-frame)
  (let ((clean-rule
         (rename-variables-in rule)))
    (let ((unify-result
           (unify-match query-pattern
                        (conclusion clean-rule)
                        query-frame)))
      (if (eq? unify-result 'failed)
          (amb)
          (qeval (rule-body clean-rule)
                 unify-result)))))

; Idiomatic
(define (apply-a-rule rule
                      query-pattern
                      query-frame)
  (let ((clean-rule
         (rename-variables-in rule)))
    (let ((unify-result
           (unify-match query-pattern
                        (conclusion clean-rule)
                        query-frame)))
     (require (not (eq? unify-result 'failed)))
     (qeval (rule-body clean-rule)
            unify-result))))

(define (unify-match p1 p2 frame)
  (cond ((eq? frame 'failed) 'failed)
        ((equal? p1 p2) frame)
        ((var? p1)
         (extend-if-possible p1 p2 frame))
        ((var? p2)
         (extend-if-possible
          p2
          p1
          frame))        ; ***
        ((and (pair? p1)
              (pair? p2))
         (unify-match
          (cdr p1)
          (cdr p2)
          (unify-match
           (car p1)
           (car p2)
           frame)))
        (else 'failed)))

(define (extend-if-possible var val frame)
  (let ((binding (binding-in-frame var frame)))
    (cond (binding
           (unify-match
            (binding-value binding) val frame))
          ((var? val)                   ; ***
           (let ((binding
                  (binding-in-frame
                   val
                   frame)))
             (if binding
                 (unify-match
                  var
                  (binding-value binding)
                  frame)
                 (extend var val frame))))
          ((depends-on? val var frame)  ; ***
           'failed)
          (else (extend var val frame)))))

; Can fail (amb) instead of true, removing the need to have a clause consequent
; or use (require (not (equal? var e)))
(define (depends-on? exp var frame)
  (define (tree-walk e)
    (cond ((var? e)
           (if (equal? var e)
               true                  ; here
               (let
                 ((b (binding-in-frame
                      e
                      frame)))
                  (if b
                      (tree-walk
                       (binding-value b))
                      false))))
          ((pair? e)
           (or (tree-walk (car e))
               (tree-walk (cdr e))))
          (else false)))
  (tree-walk exp))

;------------------------
(define (apply-a-rule rule
                      query-pattern
                      query-frame)
  (let ((clean-rule
         (rename-variables-in rule)))
    (let ((unify-result
           (unify-match query-pattern
                        (conclusion clean-rule)
                        query-frame)))
      (qeval (rule-body clean-rule)
             unify-result))))

(define (unify-match p1 p2 frame)
  (cond ((equal? p1 p2) frame)
        ((var? p1)
         (extend-if-possible p1 p2 frame))
        ((var? p2)
         (extend-if-possible
          p2
          p1
          frame))        ; ***
        ((and (pair? p1)
              (pair? p2))
         (unify-match
          (cdr p1)
          (cdr p2)
          (unify-match
           (car p1)
           (car p2)
           frame)))
        (else (amb))))

(define (extend-if-possible var val frame)
  (let ((binding (binding-in-frame var frame)))
    (cond (binding
           (unify-match
            (binding-value binding) val frame))
          ((var? val)                   ; ***
           (let ((binding
                  (binding-in-frame
                   val
                   frame)))
             (if binding
                 (unify-match
                  var
                  (binding-value binding)
                  frame)
                 (extend var val frame))))
          (else (require (not (depends-on? val var frame)))
                (extend var val frame)))))

; Rules and assertions are better suited for storage in lists, not streams
; they are already evaluated before consing
; This implementation requires storing them in lists(amb-loop)
