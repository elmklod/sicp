; form

(cond-let
 ((p0 p1 ... pn)
  (cond (pred0 (a0 a1 ... an)) ; cond symbol is just for clarity
        ...
        (else (a0 a1 ... an))))
 body)

((cond-let? exp)
 (eval
  (make-let
   (make-let-bindings
    (cond-let-params exp)
    (eval (cond-let-args-quoted exp) env))
   (cond-let-body exp))
  env))

(define (cond-let-params exp)
 (caadr exp))

(define (cond-let-body exp)
 (cddr exp))

; Or extract 'cond before this proc is applied then the else clause can be removed
; as long as 'cond will be appended later
(define (cond-let-args-quoted exp)
 (cond ((null? exp) '())
       ((pair? (car exp))
        (cons
         (list
          (caar exp)
          (cons 'quote (cdar exp)))
         (cond-let-args-quoted
          (cdr exp))))
       (else
        (cons (car exp)
              (cond-let-args-quoted (cdr exp))))))

(define (cond-let-args-quoted exp)
 (define (iter exp res)
  (if (null? exp)
      (cons 'cond (reverse result))
      (iter (cdr exp)
            (cons
             (list
              (caar exp)
              (cons 'quote (cdar exp)))
             result))))
 (iter (cdr exp) '()))


(define (make-let-bindings params args)
 (define (iter variables values result)
   (if (null? variables)
       (reverse (cons '() result))
       (iter (cdr variables)
             (cdr values)
             (cons (list (car variables)
                         (car values))
                   result))))
 (iter params args '()))

(define (make-let bindings body)
 (cons 'let
       (cons bindings
             body)))

(define (cond-let? exp)
 (tagged-list? exp 'cond-let))

((cond-let? exp)
 (eval
  (cons
   (make-lambda
    (cond-let-params exp)
    (cond-let-body exp))
   (eval (cond-let-args-quoted exp) env))
  env))
