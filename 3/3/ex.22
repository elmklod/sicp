(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (set-front-ptr! item)
      (set! front-ptr item))
    (define (set-rear-ptr! item)
      (set! rear-ptr item))
    (define (insert-queue! item)
      (let ((new-pair (cons item '())))
        (cond ((empty-queue?)
               (set-front-ptr! new-pair)
               (set-rear-ptr! new-pair))
              (else (set-cdr!
                     rear-ptr
                     new-pair)
                    (set-rear-ptr! new-pair))))
      dispatch)
    (define (delete-queue!)
      (cond ((empty-queue?)
             (error "DELETE! called with
                 an empty queue" dispatch))
            (else (set-front-ptr!
                   (cdr front-ptr))
                   dispatch)))
    (define (empty-queue?)
      (null? front-ptr))
    (define (front-queue)
      (if (empty-queue?)
          (error "FRONT called with an
              empty queue" dispatch)
          (car front-ptr)))
    (define (dispatch m)
      (cond ((eq? m 'front-queue)
             front-queue)
            ((eq? m 'empty-queue?)
             empty-queue?)
            ((eq? m 'insert-queue!)
             insert-queue!)
            ((eq? m 'delete-queue!)
             delete-queue!)
            ((eq? m 'print-queue)
             (lambda () front-ptr))))
    dispatch))

(define (front-queue queue)
  ((queue 'front-queue)))

(define (empty-queue? queue)
  ((queue 'empty-queue?)))

(define (insert-queue! queue item)
  ((queue 'insert-queue!) item))

(define (delete-queue! queue)
 ((queue 'delete-queue!)))

(define (print-queue queue)
  ((queue 'print-queue)))

This queue implementation using a message-passing style returns procedures only.

It may be possible and desirable to implement a queue using a m.p. style that returns
other data. (especially with the procedures such as print-queue, empty-queue?,
delete-queue! and front-queue)
