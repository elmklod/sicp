(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))))

(define (random-in-range-frac low high)
  (random-in-range (* 1.0 low) (* 1.0 high)))

(define (monte-carlo trials experiment)
  (define (iter trials-remaining trials-passed)
    (cond ((= trials-remaining 0)
           (/ trials-passed trials))
          ((experiment)
           (iter (- trials-remaining 1)
                 (+ trials-passed 1)))
          (else
           (iter (- trials-remaining 1)
                 trials-passed))))
  (iter trials 0))

(define (cesaro-test)
   (= (gcd (random 10000000000) (random 10000000000)) 1))

(define (estimate-integral p x1 x2 y1 y2 trials)
  (* 1.
     (- x2 x1)
     (- y2 y1)
     (monte-carlo trials (p x1 x2 y1 y2))))

(define (in-unit-circle? x1 x2 y1 y2)
  (lambda ()
    (<= (+ (square (random-in-range-frac x1 x2))
           (square (random-in-range-frac y1 y2)))
        1)))

;or

(define (in-unit-circle? x1 x2 y1 y2)
  (define (p)
    (<= (+ (square (random-in-range-frac x1 x2))
           (square (random-in-range-frac y1 y2)))
        1))
  p)

x^2 + y^2 <= 1

multiplication by 1. is done to ensure that random would return decimals, not only integers
