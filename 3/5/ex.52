(define sum 0)

0

(define (accum x)
  (set! sum (+ x sum))
  sum)

0

(define seq
  (stream-map
   accum
   (stream-enumerate-interval 1 20)))

1

(define y (stream-filter even? seq))
(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)
'(1 3 6 10 15 21 28 36 45 55 66 78 91 105 120 136 153 171 190 210)
(6 10 28 36 66 78 120 136 190 210)

6

(define z
  (stream-filter
   (lambda (x)
     (= (remainder x 5) 0)) seq))
(10 15 45 55 105 120 190 210)


10

----
No history
;(1 8 11 15)
;(15 ...) - sum = 15
----
(stream-ref y 7)
value; 136

----
no history
value; 150
150 = sum
---


136

(display-stream z)
 10
 15
 45
 55
 105
 120
 190
 210
;Value done

210

------------
no history
155
170
185
215
240
285
320
;Value done

sum = 359
-------------


Yes, the value of the sum would be different - seq would be recomputed again and again
and its elements would differ from one computation to another.
This difference depends up to what element seq was computed before and how many times
it was computed.

It makes predicting the value of seq element impossible without
the data specified above. Alternatively it requires accessing sum every time to know the value of stream element

Whereas the call-by-need + assignment implementation displays some patterns(seq is the stream of arithmetic progressions sum
from 1 to n+1, where n is the position in the stream),
call-by-name + assignment has less predictable behavior.
