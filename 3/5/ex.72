(define square-sum-numbers
  (let ((weight
         (lambda (pair)
          (+ (square (car pair))
             (square (cadr pair))))))
   (define (filter-pairs s prev)
     (let ((s1 (stream-car s))
           (s2 (stream-car (stream-cdr s)))
           (s3 (stream-car (stream-cdr (stream-cdr s)))))
       (let ((s1-num (weight s1))
             (s2-num (weight s2))
             (s3-num (weight s3)))
        (if (and (= s1-num
                    s2-num
                    s3-num)
                 (not (= s1-num
                         prev)))
            (cons-stream (list s1-num s1 s2 s3)
                         (filter-pairs (stream-cdr (stream-cdr (stream-cdr s)))
                                   s1-num))
            (filter-pairs (if (= s2-num
                                 s3-num)
                              (stream-cdr s)
                              (stream-cdr (stream-cdr s)))
                          prev)))))
   (filter-pairs
    (stream-filter
     (lambda (pair)
      (<= (car pair) (cadr pair)))
     (weighted-pairs
      integers
      integers
      weight))
    0)))
