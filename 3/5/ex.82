(define (estimate-integral p x1 x2 y1 y2)
  (define (make-integral-stream)
    (cons-stream ((p x1 x2 y1 y2))
                 (make-integral-stream)))
   (stream-scale
    (monte-carlo (make-integral-stream) 0 0)
    (* 1.
      (- x2 x1)
      (- y2 y1))))

(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))))

(define (random-in-range-frac low high)
  (random-in-range (* 1.0 low) (* 1.0 high)))

(define (in-unit-circle? x1 x2 y1 y2)
  (lambda ()
    (<= (+ (square (random-in-range-frac x1 x2))
           (square (random-in-range-frac y1 y2)))
        1)))

(define (monte-carlo experiment-stream
                     passed
                     overall)
  (define (next passed overall)
    (cons-stream
     (/ passed overall)
     (monte-carlo
      (stream-cdr experiment-stream)
      passed
      overall)))
  (next (if (stream-car experiment-stream)
            (+ passed 1)
            passed)
        (+ 1 overall)))

(define (monte-carlo experiment-stream
                     passed
                     overall)
  (let ((passed (if (stream-car experiment-stream)
                    (+ passed 1)
                    passed))
        (overall (+ overall 1)))
    (cons-stream
     (/ passed overall)
     (monte-carlo
      (stream-cdr experiment-stream)
      passed
      overall))))
