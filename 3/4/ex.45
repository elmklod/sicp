

(define
  (make-account-and-serializer balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance
                     (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (let ((balance-serializer
         (make-serializer)))
    (define (dispatch m)
      (cond ((eq? m 'withdraw)
             (balance-serializer withdraw))
            ((eq? m 'deposit)
             (balance-serializer deposit))
            ((eq? m 'balance)
             balance)
            ((eq? m 'serializer)
             balance-serializer)
            (else (error "Unknown request:
                          MAKE-ACCOUNT"
                         m))))
    dispatch))


Observe the definition of serialized-exchange:

(define (serialized-exchange account1 account2)
  (let ((serializer1 (account1 'serializer))
        (serializer2 (account2 'serializer)))
    ((serializer1 (serializer2 exchange))
     account1
     account2)))

Because of the strategy chosen for its definition, whenever serialized-exchange
is applied, no deposits and withdrawals are possible(because they are now serialized as well) within the 2 accounts serialized-exchange
is applied to.
But serialized-exchange uses deposit and withdraw procedures of the accounts.
That means serialized-exchange is not able to proceed - its body cannot finish the evalaution -
it is waiting for itself to finish first.

Therefore, the corresponding process never is forever waiting never computing anything.
